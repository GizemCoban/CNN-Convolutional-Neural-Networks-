# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cejNqsj9Bgps47-eKjmAKIPwOlOugJ6v

# New Section
"""

# -*- coding: utf-8 -*-
"""
Created on Sun Apr 26 14:29:42 2020

@author:Gizem ÇOBAN
"""
import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder

train=pd.read_csv("train.csv")
test=pd.read_csv("test.csv")

#Sınıfların Belirlenmesi ve Etiketlenmesi
label_encoder=LabelEncoder().fit(train.species)
lables=label_encoder.transform(train.species)
classes=list(label_encoder.classes_) 

#Verilerin Hazırlanması ve Özellikle Sınıf Sayısının belirlenmesi
train=train.drop(["id","species"], axis=1)
test=test.drop(["id"], axis=1)
nb_features=192
nb_classes=len(classes)

#Eğitim verilerinin standartlaştırılması
from sklearn.preprocessing import StandardScaler
scaler=StandardScaler().fit(train.values)
train=scaler.transform(train.values)

#Eğitim verisinin eğitim ve doğrulama için ayarlanması
from sklearn.model_selection import train_test_split
X_train,X_valid,y_train,y_valid=train_test_split(train,lables,test_size=0.1)

#Etiketlerin Kategorileştirilmesi
from tensorflow.keras.utils import to_categorical
y_train=to_categorical(y_train)
y_valid=to_categorical(y_valid)

X_train=np.array(X_train).reshape(891,192,1)
X_valid=np.array(X_valid).reshape(99,192,1)


#Modelin Oluşturulması
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Activation,Conv1D,Dropout,Flatten,MaxPooling1D

model=Sequential()
model.add(Conv1D(512,1,input_shape=(nb_features,1)))
model.add(Activation("relu"))
model.add(MaxPooling1D(2))
model.add(Conv1D(256,1))
model.add(Activation("relu"))
model.add(MaxPooling1D(2))
#verilerlin %25 atıyoruz
model.add(Dropout(0.25))
#verileri düzleştirme
model.add(Flatten())
#Yapay Sinir Ağı
model.add(Dense(2048,activation="relu"))
model.add(Dense(1024,activation="relu"))
#En son sonoflandırma yapalım. Sınıflandırma için softmax kullanılır
model.add(Dense(nb_classes,activation="softmax"))
model.summary()

#Modelin Derlenmesi

model.compile(optimizer='rmsprop',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

#Modelin Eğitilmesi
model.fit(X_train,y_train,epochs=7,validation_data=(X_valid,y_valid))
rmspromAcc=np.mean(model.history.history["accuracy"])

#Optimisazyonların değerlendirilmesi


model.compile(loss='categorical_crossentropy',
              optimizer='sgd',
              metrics=['accuracy'])
model.fit(X_train,y_train,epochs=7,validation_data=(X_valid,y_valid))
sgdAcc = np.mean(model.history.history["accuracy"])

model.compile(loss="categorical_crossentropy",optimizer="adam",metrics=["accuracy"])
model.fit(X_train,y_train,epochs=7,validation_data=(X_valid,y_valid))
adamAcc = np.mean(model.history.history["accuracy"])

model.compile(loss="categorical_crossentropy",optimizer="nadam",metrics=["accuracy"])
model.fit(X_train,y_train,epochs=7,validation_data=(X_valid,y_valid))
nadamAcc = np.mean(model.history.history["accuracy"])

print("Optimizasyon rmsprom Başarımı:",rmspromAcc)
print("Optimizasyon Adam Başarımı:",adamAcc)
print("Optimizasyon SGD Başarımı:",sgdAcc)
print("Optimizasyon Nadam Başarımı:",nadamAcc)

maxAcc=0
maxName=""

if(rmspromAcc>maxAcc):
  maxAcc=rmspromAcc
  maxName="Rmsprom"
if(adamAcc>maxAcc):
  maxAcc=adamAcc
  maxName="Adam"
if(sgdAcc>maxAcc):
  maxAcc=sgdAcc
  maxName="SGD"
if(nadamAcc>maxAcc):
  maxAcc=nadamAcc
  maxName="Nadam"

print("En başarılı Optimizasyon: ",maxName)